AWSTemplateFormatVersion: '2010-09-09'
Description: 'Datastax template, License: Apache 2.0 (Please do not remove) May,30,2017
  (qs-1nbqhl4uk)'
Parameters:
  KeyName:
    Description: Name of an existing EC2 KeyPair to enable SSH access to the instance
    Type: AWS::EC2::KeyPair::KeyName
    ConstraintDescription: must be the name of an existing EC2 KeyPair.
  OpsCenterIP:
    Description: Public IP of OpsCenter instance.
    Type: String
    AllowedPattern: (\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})
    ConstraintDescription: must be valid IP
  OpsCPassword:
    Type: String
    Description: Password for default OpsCenter user 'admin'
    NoEcho: true
  ClusterName:
    Description: Name of DSE cluster
    Type: String
  DataCenterName:
    Description: Name of DSE cluster
    Type: String
  DataCenterSize:
    Type: Number
    Description: Number of nodes in datacenter
    Default: '3'
  Profile:
    Description: InstanceProfile for OpsC instance
    Type: String
  S3Bucket:
    Description: S3Bucket for public key passing
    Type: String
  InstanceType:
    Description: Node EC2 instance type
    Type: String
    Default: r5.2xlarge
    AllowedValues:
      - t2.medium
      - m4.large
      - m4.xlarge
      - m4.2xlarge
      - m4.4xlarge
      - m4.10xlarge
      - c4.large
      - c4.xlarge
      - c4.2xlarge
      - c4.4xlarge
      - i3.xlarge
      - i3.2xlarge
      - i3.4xlarge
      - r5.large
      - r5.xlarge
      - r5.2xlarge
      - r5.4xlarge
      - r5.8xlarge
    ConstraintDescription: must be a valid EC2 instance type.
  VolumeSize:
    Type: Number
    Description: EBS volume size in GB
    Default: '1024'
  SecurityCIDR:
    Description: The IP address range covering node instances
    Type: String
    MinLength: '9'
    MaxLength: '18'
    AllowedPattern: (\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})/(\d{1,2})
    ConstraintDescription: must be a valid IP CIDR range of the form x.x.x.x/x.
  AvailabilityZones:
    Type: List<AWS::EC2::AvailabilityZone::Name>
    Description: List of AZs in VPC
  VPC:
    Type: AWS::EC2::VPC::Id
    Description: VPC id
  Subnets:
    Type: CommaDelimitedList
    Description: List of subnet ids to deploy nodes into
  Search:
    Description: True if this is a search DC
    Type: String
    AllowedValues:
      - True
      - False
    Default: False
  Analytics:
    Description: True if this is an analytics DC
    Type: String
    AllowedValues:
      - True
      - False
    Default: False
Mappings:
  AWSAMIRegionMap:
    AMI:
      US1604HVM: ubuntu/images/hvm-ssd/ubuntu-xenial-16.04-amd64-server-20190628
    ap-southeast-2:
      US1604HVM: ami-02d7e25c1cfdd5695
    eu-central-1:
      US1604HVM: ami-03d8059563982d7b0
    eu-west-1:
      US1604HVM: ami-0f630a3f40b1eb0b8
    us-east-1:
      US1604HVM: ami-08bc77a2c7eb2b1da
    us-east-2:
      US1604HVM: ami-08cec7c429219e339
    us-west-2:
      US1604HVM: ami-02d0ea44ae3fe9561
Resources:
  CassandraGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      AvailabilityZones: !Ref 'AvailabilityZones'
      LaunchConfigurationName: !Ref 'CassandraLaunchConfig'
      MinSize: !Ref 'DataCenterSize'
      MaxSize: !Ref 'DataCenterSize'
      VPCZoneIdentifier: !Ref 'Subnets'
    CreationPolicy:
      ResourceSignal:
        Timeout: PT90M
        Count: '1'
    UpdatePolicy:
      AutoScalingRollingUpdate:
        MinInstancesInService: 1
        MaxBatchSize: 1
        PauseTime: PT90M
        WaitOnResourceSignals: true
    DependsOn: DSESecurityGroup
  CassandraLaunchConfig:
    Type: AWS::AutoScaling::LaunchConfiguration
    Metadata:
      AWS::CloudFormation::Init:
        configSets:
          full_install:
            - install_cfn
            - setup_disk
            - add_node
        install_cfn:
          files:
            /etc/cfn/cfn-hup.conf:
              content: !Join
                - ''
                - - "[main]\n"
                  - stack=
                  - !Ref 'AWS::StackId'
                  - "\n"
                  - region=
                  - !Ref 'AWS::Region'
                  - "\n"
              mode: '000400'
              owner: root
              group: root
            /etc/cfn/hooks.d/cfn-auto-reloader.conf:
              content: !Join
                - ''
                - - "[cfn-auto-reloader-hook]\n"
                  - "triggers=post.update\n"
                  - "path=Resources.CassandraLaunchConfig.Metadata.AWS::CloudFormation::Init\n"
                  - 'action=/usr/local/bin/cfn-init -v '
                  - '         --stack '
                  - !Ref 'AWS::StackName'
                  - '         --resource CassandraLaunchConfig '
                  - '         --configsets full_install '
                  - '         --region '
                  - !Ref 'AWS::Region'
                  - "\n"
                  - "runas=root\n"
          services:
            sysvinit:
              cfn-hup:
                enabled: 'true'
                ensureRunning: 'true'
                files:
                  - /etc/cfn/cfn-hup.conf
                  - /etc/cfn/hooks.d/cfn-auto-reloader.conf
        setup_disk:
          commands:
            '01_setup_disk':
              command: !Join
                - ''
                - - "#!/bin/bash -xe\n"
                  - "mkfs -t ext4 /dev/xvdf \n"
                  - "mkdir -p /data/cassandra \n"
                  - "mount /dev/xvdf /data/cassandra \n"
                  - "mkdir /data/cassandra/data \n"
                  - "mkdir /data/cassandra/commitlog \n"
                  - "mkdir /data/cassandra/saved_caches \n"
                  - "mkdir /data/cassandra/dsefs \n"
                  - "useradd cassandra \n"
                  - "chown -R cassandra:cassandra /data/cassandra \n"
                  - "cp /etc/fstab /etc/fstab.bak \n"
                  - "echo \"/dev/xvdf       /data/cassandra   ext4    defaults,nofail\
                    \        0       2\" >> /etc/fstab \n"
        add_node:
          commands:
            '01_add_node':
              command: !Join
                - ''
                - - "#!/usr/bin/env bash -e \n"
                  - "apt-get -y install unzip \n"
                  - "pip install awscli \n"
                  - "cd ~ubuntu \n"
                  - "n=1 \n"
                  - "until [ $n -ge 8 ] \n"
                  - "do \n"
                  - aws s3 cp s3://
                  - !Ref 'S3Bucket'
                  - '/lcm.pem.pub .ssh/ --region '
                  - !Ref 'AWS::Region'
                  - " && break \n"
                  - "echo \"S3 download try $n failed, sleeping...\" \n"
                  - "n=$[$n+1] \n"
                  - "sleep 5s \n"
                  - "done \n"
                  - "cat .ssh/lcm.pem.pub >> .ssh/authorized_keys \n"
                  - "release=\"7.4.0\" \n"
                  - "export OPSC_VERSION='6.8.17' \n"
                  - "wget https://github.com/MarkWolters/install-datastax-ubuntu/archive/refs/tags/$release.tar.gz\ 
                    \ \n"
                  - "tar -xvf $release.tar.gz \n"
                  - "cd install-datastax-ubuntu-$release/bin \n"
                  - "./os/extra_packages.sh \n"
                  - "privip=$(curl http://169.254.169.254/latest/meta-data/local-ipv4)\
                    \ \n"
                  - "nodeid=$(curl http://169.254.169.254/latest/meta-data/instance-id)\
                    \ \n"
                  - "rack=$(curl http://169.254.169.254/latest/meta-data/placement/availability-zone)\
                    \ \n"
                  - "echo 'Calling addNode.py...' \n"
                  - './lcm/addNode.py '
                  - ' --opsc-ip '
                  - !Ref 'OpsCenterIP'
                  - ' --clustername '''
                  - !Ref 'ClusterName'
                  - ''' '
                  - ' --dcname '''
                  - !Ref 'DataCenterName'
                  - ''' '
                  - ' --rack $rack'
                  - ' --pubip $privip'
                  - ' --privip $privip'
                  - ' --nodeid $nodeid'
                  - ' --opscpw '''
                  - !Ref 'OpsCPassword'
                  - ' --search '''
                  - !Ref 'Search'
                  - ' --analytics '''
                  - !Ref 'Analytics'
                  - "' \n"
                  - './lcm/waitForJobs.py '
                  - ' --opsc-ip '
                  - !Ref 'OpsCenterIP'
                  - ' --opscpw '''
                  - !Ref 'OpsCPassword'
                  - "' \n"
    Properties:
      ImageId: !FindInMap
        - AWSAMIRegionMap
        - !Ref 'AWS::Region'
        - US1604HVM
      InstanceType: !Ref 'InstanceType'
      IamInstanceProfile: !Ref 'Profile'
      SecurityGroups:
        - !Ref 'DSESecurityGroup'
      KeyName: !Ref 'KeyName'
      BlockDeviceMappings:
        - DeviceName: /dev/xvdf
          Ebs:
            VolumeType: gp2
            VolumeSize: !Ref 'VolumeSize'
      UserData: !Base64
        Fn::Join:
          - ''
          - - "#!/bin/bash -xe\n"
            - "apt-get update\n"
            - "apt-get -y install python python-setuptools python-pip\n"
            - "pip install --retries 10 https://s3.amazonaws.com/cloudformation-examples/aws-cfn-bootstrap-latest.tar.gz\
              \ \n"
            - "ln -s /usr/local/init/ubuntu/cfn-hup /etc/init.d/cfn-hup \n"
            - "chmod 775 /usr/local/init/ubuntu/cfn-hup \n"
            - "update-rc.d cfn-hup defaults \n"
            - '/usr/local/bin/cfn-init -v '
            - '         --stack '
            - !Ref 'AWS::StackId'
            - '         --resource CassandraLaunchConfig '
            - '         --configsets full_install '
            - '         --region '
            - !Ref 'AWS::Region'
            - "\n"
            - '/usr/local/bin/cfn-signal -e $? '
            - '         --stack '
            - !Ref 'AWS::StackId'
            - '         --resource CassandraGroup '
            - '         --region '
            - !Ref 'AWS::Region'
            - "\n"
    CreationPolicy:
      ResourceSignal:
        Timeout: PT35M
  DSESecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Enable HTTP(S), SSH access, and DSE ports
      VpcId: !Ref 'VPC'
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 1
          ToPort: 65535
          CidrIp: !Ref 'SecurityCIDR'
